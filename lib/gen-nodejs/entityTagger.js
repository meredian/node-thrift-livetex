"use strict";
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var tagService_ttypes = require('./tagService_types')
var entityService_ttypes = require('./entityService_types')


var ttypes = require('./entityTagger_types');
//HELPER FUNCTIONS AND STRUCTURES

var EntityTagger_addEntityTag_args = function(args) {
  this.entityId = null;
  this.tagId = null;
  if (args) {
    if (args.entityId !== undefined) {
      this.entityId = args.entityId;
    }
    if (args.tagId !== undefined) {
      this.tagId = args.tagId;
    }
  }
};
EntityTagger_addEntityTag_args.prototype = {};
EntityTagger_addEntityTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.entityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.tagId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityTagger_addEntityTag_args.prototype.write = function(output) {
  output.writeStructBegin('EntityTagger_addEntityTag_args');
  if (this.entityId !== null && this.entityId !== undefined) {
    output.writeFieldBegin('entityId', Thrift.Type.I32, 1);
    output.writeI32(this.entityId);
    output.writeFieldEnd();
  }
  if (this.tagId !== null && this.tagId !== undefined) {
    output.writeFieldBegin('tagId', Thrift.Type.I32, 2);
    output.writeI32(this.tagId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityTagger_addEntityTag_result = function(args) {
};
EntityTagger_addEntityTag_result.prototype = {};
EntityTagger_addEntityTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityTagger_addEntityTag_result.prototype.write = function(output) {
  output.writeStructBegin('EntityTagger_addEntityTag_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityTagger_removeEntityTag_args = function(args) {
  this.entityId = null;
  this.tagId = null;
  if (args) {
    if (args.entityId !== undefined) {
      this.entityId = args.entityId;
    }
    if (args.tagId !== undefined) {
      this.tagId = args.tagId;
    }
  }
};
EntityTagger_removeEntityTag_args.prototype = {};
EntityTagger_removeEntityTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.entityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.tagId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityTagger_removeEntityTag_args.prototype.write = function(output) {
  output.writeStructBegin('EntityTagger_removeEntityTag_args');
  if (this.entityId !== null && this.entityId !== undefined) {
    output.writeFieldBegin('entityId', Thrift.Type.I32, 1);
    output.writeI32(this.entityId);
    output.writeFieldEnd();
  }
  if (this.tagId !== null && this.tagId !== undefined) {
    output.writeFieldBegin('tagId', Thrift.Type.I32, 2);
    output.writeI32(this.tagId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityTagger_removeEntityTag_result = function(args) {
};
EntityTagger_removeEntityTag_result.prototype = {};
EntityTagger_removeEntityTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityTagger_removeEntityTag_result.prototype.write = function(output) {
  output.writeStructBegin('EntityTagger_removeEntityTag_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityTagger_getEntityTags_args = function(args) {
  this.entityId = null;
  if (args) {
    if (args.entityId !== undefined) {
      this.entityId = args.entityId;
    }
  }
};
EntityTagger_getEntityTags_args.prototype = {};
EntityTagger_getEntityTags_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.entityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityTagger_getEntityTags_args.prototype.write = function(output) {
  output.writeStructBegin('EntityTagger_getEntityTags_args');
  if (this.entityId !== null && this.entityId !== undefined) {
    output.writeFieldBegin('entityId', Thrift.Type.I32, 1);
    output.writeI32(this.entityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityTagger_getEntityTags_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
EntityTagger_getEntityTags_result.prototype = {};
EntityTagger_getEntityTags_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new tagService_ttypes.Tag();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityTagger_getEntityTags_result.prototype.write = function(output) {
  output.writeStructBegin('EntityTagger_getEntityTags_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityTagger_getEntitiesByTagList_args = function(args) {
  this.tagIds = null;
  if (args) {
    if (args.tagIds !== undefined) {
      this.tagIds = args.tagIds;
    }
  }
};
EntityTagger_getEntitiesByTagList_args.prototype = {};
EntityTagger_getEntitiesByTagList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.tagIds = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI32();
          this.tagIds.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityTagger_getEntitiesByTagList_args.prototype.write = function(output) {
  output.writeStructBegin('EntityTagger_getEntitiesByTagList_args');
  if (this.tagIds !== null && this.tagIds !== undefined) {
    output.writeFieldBegin('tagIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.tagIds.length);
    for (var iter15 in this.tagIds)
    {
      if (this.tagIds.hasOwnProperty(iter15))
      {
        iter15 = this.tagIds[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityTagger_getEntitiesByTagList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
EntityTagger_getEntitiesByTagList_result.prototype = {};
EntityTagger_getEntitiesByTagList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new entityService_ttypes.Entity();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityTagger_getEntitiesByTagList_result.prototype.write = function(output) {
  output.writeStructBegin('EntityTagger_getEntitiesByTagList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityTaggerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
EntityTaggerClient.prototype = {};
EntityTaggerClient.prototype.seqid = function() { return this._seqid; }
EntityTaggerClient.prototype.new_seqid = function() { return this._seqid += 1; }
EntityTaggerClient.prototype.addEntityTag = function(entityId, tagId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addEntityTag(entityId, tagId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addEntityTag(entityId, tagId);
  }
};

EntityTaggerClient.prototype.send_addEntityTag = function(entityId, tagId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addEntityTag', Thrift.MessageType.CALL, this.seqid());
  var args = new EntityTagger_addEntityTag_args();
  args.entityId = entityId;
  args.tagId = tagId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EntityTaggerClient.prototype.recv_addEntityTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EntityTagger_addEntityTag_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
EntityTaggerClient.prototype.removeEntityTag = function(entityId, tagId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeEntityTag(entityId, tagId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeEntityTag(entityId, tagId);
  }
};

EntityTaggerClient.prototype.send_removeEntityTag = function(entityId, tagId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeEntityTag', Thrift.MessageType.CALL, this.seqid());
  var args = new EntityTagger_removeEntityTag_args();
  args.entityId = entityId;
  args.tagId = tagId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EntityTaggerClient.prototype.recv_removeEntityTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EntityTagger_removeEntityTag_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
EntityTaggerClient.prototype.getEntityTags = function(entityId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getEntityTags(entityId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getEntityTags(entityId);
  }
};

EntityTaggerClient.prototype.send_getEntityTags = function(entityId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getEntityTags', Thrift.MessageType.CALL, this.seqid());
  var args = new EntityTagger_getEntityTags_args();
  args.entityId = entityId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EntityTaggerClient.prototype.recv_getEntityTags = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EntityTagger_getEntityTags_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getEntityTags failed: unknown result');
};
EntityTaggerClient.prototype.getEntitiesByTagList = function(tagIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getEntitiesByTagList(tagIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getEntitiesByTagList(tagIds);
  }
};

EntityTaggerClient.prototype.send_getEntitiesByTagList = function(tagIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getEntitiesByTagList', Thrift.MessageType.CALL, this.seqid());
  var args = new EntityTagger_getEntitiesByTagList_args();
  args.tagIds = tagIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EntityTaggerClient.prototype.recv_getEntitiesByTagList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EntityTagger_getEntitiesByTagList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getEntitiesByTagList failed: unknown result');
};
var EntityTaggerProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
EntityTaggerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

EntityTaggerProcessor.prototype.process_addEntityTag = function(seqid, input, output) {
  var args = new EntityTagger_addEntityTag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addEntityTag.length === 2) {
    Q.fcall(this._handler.addEntityTag, args.entityId, args.tagId)
      .then(function(result) {
        var result = new EntityTagger_addEntityTag_result({success: result});
        output.writeMessageBegin("addEntityTag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new EntityTagger_addEntityTag_result(err);
        output.writeMessageBegin("addEntityTag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addEntityTag(args.entityId, args.tagId,  function (err, result) {
      var result = new EntityTagger_addEntityTag_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addEntityTag", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

EntityTaggerProcessor.prototype.process_removeEntityTag = function(seqid, input, output) {
  var args = new EntityTagger_removeEntityTag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeEntityTag.length === 2) {
    Q.fcall(this._handler.removeEntityTag, args.entityId, args.tagId)
      .then(function(result) {
        var result = new EntityTagger_removeEntityTag_result({success: result});
        output.writeMessageBegin("removeEntityTag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new EntityTagger_removeEntityTag_result(err);
        output.writeMessageBegin("removeEntityTag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeEntityTag(args.entityId, args.tagId,  function (err, result) {
      var result = new EntityTagger_removeEntityTag_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeEntityTag", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

EntityTaggerProcessor.prototype.process_getEntityTags = function(seqid, input, output) {
  var args = new EntityTagger_getEntityTags_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getEntityTags.length === 1) {
    Q.fcall(this._handler.getEntityTags, args.entityId)
      .then(function(result) {
        var result = new EntityTagger_getEntityTags_result({success: result});
        output.writeMessageBegin("getEntityTags", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new EntityTagger_getEntityTags_result(err);
        output.writeMessageBegin("getEntityTags", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getEntityTags(args.entityId,  function (err, result) {
      var result = new EntityTagger_getEntityTags_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getEntityTags", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

EntityTaggerProcessor.prototype.process_getEntitiesByTagList = function(seqid, input, output) {
  var args = new EntityTagger_getEntitiesByTagList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getEntitiesByTagList.length === 1) {
    Q.fcall(this._handler.getEntitiesByTagList, args.tagIds)
      .then(function(result) {
        var result = new EntityTagger_getEntitiesByTagList_result({success: result});
        output.writeMessageBegin("getEntitiesByTagList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new EntityTagger_getEntitiesByTagList_result(err);
        output.writeMessageBegin("getEntitiesByTagList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getEntitiesByTagList(args.tagIds,  function (err, result) {
      var result = new EntityTagger_getEntitiesByTagList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getEntitiesByTagList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

